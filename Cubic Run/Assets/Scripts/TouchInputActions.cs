//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/TouchInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInputActions"",
    ""maps"": [
        {
            ""name"": ""TouchInputMovement"",
            ""id"": ""faef14be-7253-4dca-9c51-2a4786e47502"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""009518fd-0cf0-4e5d-8bf3-80aa9141e211"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""9ea7f132-8528-4bbb-a3ed-ba07d34108ca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e110536f-8ef6-4de5-949b-b37bbcd851de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""367eb3a9-d9c5-4c9b-83fb-3d92d3a7a34d"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0621f51-bdec-49ee-85e1-9684c88af261"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e61984f-e8bf-4b2f-a18a-50296c09373b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchInputMovement
        m_TouchInputMovement = asset.FindActionMap("TouchInputMovement", throwIfNotFound: true);
        m_TouchInputMovement_Touch = m_TouchInputMovement.FindAction("Touch", throwIfNotFound: true);
        m_TouchInputMovement_Swipe = m_TouchInputMovement.FindAction("Swipe", throwIfNotFound: true);
        m_TouchInputMovement_Shoot = m_TouchInputMovement.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchInputMovement
    private readonly InputActionMap m_TouchInputMovement;
    private List<ITouchInputMovementActions> m_TouchInputMovementActionsCallbackInterfaces = new List<ITouchInputMovementActions>();
    private readonly InputAction m_TouchInputMovement_Touch;
    private readonly InputAction m_TouchInputMovement_Swipe;
    private readonly InputAction m_TouchInputMovement_Shoot;
    public struct TouchInputMovementActions
    {
        private @TouchInputActions m_Wrapper;
        public TouchInputMovementActions(@TouchInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_TouchInputMovement_Touch;
        public InputAction @Swipe => m_Wrapper.m_TouchInputMovement_Swipe;
        public InputAction @Shoot => m_Wrapper.m_TouchInputMovement_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_TouchInputMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchInputMovementActions set) { return set.Get(); }
        public void AddCallbacks(ITouchInputMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchInputMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchInputMovementActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @Swipe.started += instance.OnSwipe;
            @Swipe.performed += instance.OnSwipe;
            @Swipe.canceled += instance.OnSwipe;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(ITouchInputMovementActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @Swipe.started -= instance.OnSwipe;
            @Swipe.performed -= instance.OnSwipe;
            @Swipe.canceled -= instance.OnSwipe;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(ITouchInputMovementActions instance)
        {
            if (m_Wrapper.m_TouchInputMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchInputMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchInputMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchInputMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchInputMovementActions @TouchInputMovement => new TouchInputMovementActions(this);
    public interface ITouchInputMovementActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnSwipe(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
